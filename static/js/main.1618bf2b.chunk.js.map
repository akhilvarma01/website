{"version":3,"sources":["assets/bridge.jpg","assets/image.jpg","Home.js","About.js","Contact.js","NoMatch.js","components/Layout.js","components/NavigationBar.js","components/Jumbotron.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Styles","styled","div","_templateObject","bridge","Home","react_default","a","createElement","className","About","Contact","NoMatch","Layout","props","Container_default","children","NavigationBar_templateObject","NavigationBar","NavigationBar_Styles","Navbar","expand","Brand","href","Toggle","aria-controls","Collapse","id","Nav","classname","Item","Link","Jumbotron_templateObject","image","Jumbotron","Jumbotron_Styles","es_Jumbotron","fluid","es_Container","App","Fragment","NavigationBar_NavigationBar","Jumbotron_Jumbotron","Layout_Layout","react_router_dom","basename","react_router","exact","path","component","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,uDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,wfCKxC,IAAMC,EAASC,IAAOC,IAAVC,IAEWC,KAQVC,EAAO,kBACpBC,EAAAC,EAAAC,cAACR,EAAD,KACAM,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACXH,EAAAC,EAAAC,cAAA,6BChBSE,EAAQ,kBACrBJ,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,6BCFSG,EAAU,kBACvBL,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,+BCFSI,EAAU,kBACvBN,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,gDCDSK,EAAS,SAACC,GAAD,OAClBR,EAAAC,EAAAC,cAACO,EAAAR,EAAD,KACKO,EAAME,6RCDf,IAAMhB,EAASC,IAAOC,IAAVe,KAcCC,EAAgB,kBAC7BZ,EAAAC,EAAAC,cAACW,EAAD,KACIb,EAAAC,EAAAC,cAACY,EAAA,EAAD,CAAQC,OAAO,MACXf,EAAAC,EAAAC,cAACY,EAAA,EAAOE,MAAR,CAAcC,KAAK,KAAnB,aACAjB,EAAAC,EAAAC,cAACY,EAAA,EAAOI,OAAR,CAAeC,gBAAc,qBAC7BnB,EAAAC,EAAAC,cAACY,EAAA,EAAOM,SAAR,CAAiBC,GAAG,qBACpBrB,EAAAC,EAAAC,cAACoB,EAAA,EAAD,CAAKC,UAAU,WACXvB,EAAAC,EAAAC,cAACoB,EAAA,EAAIE,KAAL,KAAUxB,EAAAC,EAAAC,cAACoB,EAAA,EAAIG,KAAL,CAAUR,KAAK,KAAf,SACVjB,EAAAC,EAAAC,cAACoB,EAAA,EAAIE,KAAL,KAAUxB,EAAAC,EAAAC,cAACoB,EAAA,EAAIG,KAAL,CAAUR,KAAK,UAAf,UACVjB,EAAAC,EAAAC,cAACoB,EAAA,EAAIE,KAAL,KAAUxB,EAAAC,EAAAC,cAACoB,EAAA,EAAIG,KAAL,CAAUR,KAAK,YAAf,mmBCtBtB,IAAMvB,EAASC,IAAOC,IAAV8B,IAEWC,KAoBVC,EAAY,kBACrB5B,EAAAC,EAAAC,cAAC2B,EAAD,KACI7B,EAAAC,EAAAC,cAAC4B,EAAA,EAAD,CAAOC,OAAK,EAAC5B,UAAU,SACnBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACfH,EAAAC,EAAAC,cAAC8B,EAAA,EAAD,KACAhC,EAAAC,EAAAC,cAAA,gCACAF,EAAAC,EAAAC,cAAA,uCCFG+B,mLAnBb,OACEjC,EAAAC,EAAAC,cAACF,EAAAC,EAAMiC,SAAP,KACAlC,EAAAC,EAAAC,cAACiC,EAAD,MACAnC,EAAAC,EAAAC,cAACkC,EAAD,MACApC,EAAAC,EAAAC,cAACmC,EAAD,KACArC,EAAAC,EAAAC,cAACoC,EAAA,EAAD,CAAYC,SAAS,YACnBvC,EAAAC,EAAAC,cAACsC,EAAA,EAAD,KACExC,EAAAC,EAAAC,cAACsC,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAM,YAAYC,UAAa5C,IAC5CC,EAAAC,EAAAC,cAACsC,EAAA,EAAD,CAAOE,KAAM,kBAAkBC,UAAavC,IAC5CJ,EAAAC,EAAAC,cAACsC,EAAA,EAAD,CAAOE,KAAM,WAAWC,UAAatC,IACrCL,EAAAC,EAAAC,cAACsC,EAAA,EAAD,CAAOG,UAAYrC,eAZTsC,aCEEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOnD,EAAAC,EAAAC,cAACkD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.1618bf2b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bridge.aba97fb4.jpg\";","module.exports = __webpack_public_path__ + \"static/media/image.1ee62996.jpg\";","import React from 'react';\nimport {Container} from 'react-bootstrap';\nimport styled from 'styled-components';\nimport bridge from '../src/assets/bridge.jpg';\n\nconst Styles = styled.div`\n.jumbo {\n    background : url(${bridge}) no-repeat fixed bottom;\n    width:750px;\n    height:1260px;\n    color: #fcfcfc;\n    height: 200px;\n    position: relative;\n}\n`;\nexport const Home = () => (\n<Styles>\n<div className='jumbo'>\n    <h2>Home Default</h2>\n    </div>\n</Styles>\n)","import React from 'react';\n\nexport const About = () => (\n<div>\n    <h2>About Default</h2>\n</div>\n)","import React from 'react';\n\nexport const Contact = () => (\n<div>\n    <h2>Contact Default</h2>\n</div>\n)","import React from 'react';\n\nexport const NoMatch = () => (\n<div>\n    <h2>NoMatch Default</h2>\n</div>\n)","import React from 'react';\nimport Container from 'react-bootstrap/Container';\n\nexport const Layout = (props) => (\n    <Container>\n        {props.children}\n    </Container>\n)","import React from 'react';    \nimport { Nav, Navbar } from 'react-bootstrap';\nimport styled from 'styled-components';\n\nconst Styles = styled.div`\n    .navbar {\n        background-color: #222;\n    }\n\n    .navbar-brand, .navbar-nav .nav-link{\n        color: #bbb;\n\n        &:hover {\n            color:white;\n        }\n    }\n`;\n\nexport const NavigationBar = () => (\n<Styles>\n    <Navbar expand='lg'>\n        <Navbar.Brand href='/'>Code Life</Navbar.Brand>\n        <Navbar.Toggle aria-controls='basic-navbar-nav' />\n        <Navbar.Collapse id='basic-navbar-nav'></Navbar.Collapse>\n        <Nav classname='ml-auto'>\n            <Nav.Item><Nav.Link href='/'>Home</Nav.Link></Nav.Item>\n            <Nav.Item><Nav.Link href='/about'>About</Nav.Link></Nav.Item>\n            <Nav.Item><Nav.Link href='/contact'>Contact</Nav.Link></Nav.Item>\n        </Nav>\n    </Navbar>\n</Styles>\n)\n","import React from 'react';\nimport { Jumbotron as Jumbo, Container} from 'react-bootstrap';\nimport styled from 'styled-components';\nimport image from '../assets/image.jpg';\n\nconst Styles = styled.div`\n.jumbo {\n    background : url(${image}) no-repeat fixed bottom;\n    background-size : cover;\n    color: #ccc;\n    height: 200px;\n    position: relative;\n    z-index: -2;\n\n    .overlay {\n        background-color: #000;\n        opacity: 0.6;\n        position: absolute;\n        top: 0;\n        left: 0;<Nav.Item><Nav.Link href='/'>Home</Nav.Link></Nav.Item><Nav.Item><Nav.Link href='/'>Home</Nav.Link></Nav.Item>\n        bottom: 0;\n        right: 0;\n        z-index: -1;\n    }\n}\n`;\n\nexport const Jumbotron = () => (\n    <Styles>\n        <Jumbo fluid className='jumbo'>\n            <div className='overlay'></div>\n            <Container>\n            <h1>Welcome to my Page</h1>\n            <p>This is a test website</p>\n            </Container>\n        </Jumbo>\n    </Styles>\n)","import React, { Component } from 'react';\nimport { HashRouter, Route, Switch } from 'react-router-dom';\nimport { Home } from './Home';\nimport { About } from './About';\nimport { Contact } from './Contact';\nimport { NoMatch } from './NoMatch';\nimport { Layout } from './components/Layout';\nimport { NavigationBar } from './components/NavigationBar';\nimport { Jumbotron } from './components/Jumbotron'\n\nclass App extends Component {\n  render() {\n  return (\n    <React.Fragment>\n    <NavigationBar />\n    <Jumbotron />\n    <Layout>\n    <HashRouter basename=\"/website\">\n      <Switch>\n        <Route exact path =\"website/#\" component = {Home} />\n        <Route path =\"website/#/about\" component = {About} />\n        <Route path =\"/contact\" component = {Contact} />\n        <Route component ={NoMatch} />\n      </Switch>\n    </HashRouter>\n    </Layout>\n    </React.Fragment>\n  );\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}